#!/bin/bash

FONT_RED='\033[1;31m'
FONT_GREEN='\033[1;32m'
FONT_YELLOW='\033[1;33m'
FONT_BLUE='\033[1;34m'
FONT_PURPLE='\033[1;35m'
FONT_CYAN='\033[1;36m'
FONT_RESET='\033[0m'

function send_mesage() {
    local message_color message_type message_text
    message_color="${1}"
    message_type="${2:-UNDEF}"
    message_text="${3}"

    echo -e "${message_color} $(date '+%F %T') [${message_type}] ${message_text} ${FONT_RESET}"
}

function echo_error() {
    local message
    message="${1}"
    send_mesage "${FONT_RED}" 'ERROR' "${message}"
}

function echo_warn() {
    local message
    message="${1}"
    send_mesage "${FONT_YELLOW}" 'WARN ' "${message}"
}

function echo_info() {
    local message
    message="${1}"
    send_mesage "${FONT_CYAN}" 'INFO ' "${message}"
}

function echo_debug() {
    local message
    message="${1}"
    if [ "${DEBUG}" == 'true' ]; then
        send_mesage "${FONT_BLUE}" 'DEBUG' "${message}"
    fi
}

function echo_success() {
    local message
    message="${1}"
    send_mesage "${FONT_GREEN}" ' OK  ' "${message}"
}

function wait_until_up() {
    local check_target check_attempts check_sleep
    check_target="${1:?Target for check was not provided}"
    check_attempts="${2:-60}"
    check_sleep="${3:-2}"
    check_code="${4:-200|301|302}"

    echo_info "Waiting for '${check_code}' code response from '${check_target}' with max '${check_attempts}' attempts and '${check_sleep}' sec pauses between" >&2

    for ((i=1; i<=${check_attempts}; i++)); do
        echo_debug "Try ${i} of ${check_attempts} ..." >&2
        curl_result=$(curl -sI -o /dev/null -w "%{http_code}\n" "${check_target}")

        if [[ "${curl_result}" =~ (${check_code}) ]]; then
            echo_success "Got '${curl_result}' code response from '${check_target}'" >&2
            return 0
        fi

        sleep "${check_sleep}"
    done

    echo_error "Can't get '${check_code}' code response from '${check_target}'" >&2
    exit 1
}

######### START

echo_info '=> Starting DFX ...' >&2
dfx start --background --clean --host 0.0.0.0:8000 &

echo_debug '==> Waiting Until DFX UP...' >&2
wait_until_up 'http://127.0.0.1:8000' 120 5 '200|301|302|400'

echo_info '=> Build and Deploy default_project ...' >&2
echo_debug '==> (frontend) npm install' >&2
npm install

echo_debug '==> rustup' >&2
rustup target add wasm32-unknown-unknown

echo_debug '==> ic-cdk-optimizer' >&2
cargo install ic-cdk-optimizer --version 0.3.1

echo_debug '==> default_project' >&2
II_ENV=development dfx deploy --no-wallet --argument '(null)'

echo_debug '==> (frontend) npm start' >&2
npm start &

echo_debug '==> Waiting Until frontend UP ...' >&2
wait_until_up 'http://127.0.0.1:8080' 240 5

echo_warn '=> For fast run you can use docker-commit after default_project installation ...' >&2

echo_warn '=> Entering to infinity loop ...' >&2
sleep infinity
